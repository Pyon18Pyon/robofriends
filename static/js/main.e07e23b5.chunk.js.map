{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","components/CountButton.jsx","components/Header.jsx","containers/App.jsx","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CountButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","REQUEST_ROBOTS_FAILED","Boolean","window","location","hostname","match","initialSateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e07e23b5.chunk.js","sourcesContent":["import React from \"react\";   // Inside the 'return();' is JSX so React much be imported.\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200`} /> \r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\n\r\n/*\r\n  1. 'robohash' is an API that creates random robot images by typing words after the URL\r\n  2. Instead of using 'props' we can use destructuring to make the code cleaner.\r\n      const Card = (props) => {\r\n      const { name, email, id } = props;\r\n        or\r\n      const Card = ({ name, email, id }) => {\r\n  3. \r\n\r\n*/","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log(\"CardList\");\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  console.log(\"SearchBox\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  // console.log(props); \r\n  /* I get an Object in console. Even though I didn't pass any props to <Scroll> in App.jsx, automatically every single component\r\n   in react has this property 'children'. This children has type: CardList, so using prop.children we can create \r\n   components that wrap other components.  */\r\n  //  If we just put <h1>Hi</h1> here it will display Hi in the browser.\r\n  return (\r\n    <div style={{overflowY: \"scroll\", border: \"5px solid black\", height: \"500px\" }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Scroll;\r\n\r\n// style inside jsx file we need to have {{}} double carly brackets. ","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // This is like a try and catch block in JS.\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\n\nclass CountButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // console.log(nextProps, nextState); // We can see the current props and state.\n    // return true;\n    if (this.state.count !== nextState.count) {\n      return true;\n    } \n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return {count: state.count + 1 };\n    })    \n  } \n\n  render() {\n    console.log(\"CountButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n    ) \n  }\n}\n\nexport default CountButton;\n\n","import React, { Component } from \"react\";\nimport CountButton from \"./CountButton\";\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return true;\n  }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CountButton />\n      </div>\n      \n    )\n  }\n}\n\nexport default Header;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList.jsx\";\r\nimport SearchBox from \"../components/SearchBox.jsx\";\r\nimport Scroll from \"../components/Scroll.jsx\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary.jsx\";\r\nimport Header from \"../components/Header\";\r\nimport \"./App.css\";\r\n\r\nimport { setSeachField, requestRobots } from \"../actions.js\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSeachField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     robots: [],\r\n  //     // searchfield: \"\",\r\n  //   };\r\n  // }\r\n\r\n  componentDidMount() {\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then(response => response.json())\r\n    //   .then(users => this.setState({ robots: users }));\r\n    this.props.onRequestRobots(); // This line is added for Redux. \r\n  }\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchfield: event.target.value });\r\n  // }\r\n\r\n  render() {\r\n    // const { robots } = this.state; // Removed 'searchfield' as we now have Redux 'searchField'\r\n    const { searchField, onSearchChange, robots, isPending } = this.props; // This line is added for Redux. \r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase()); // Changed 'searchfield' to 'searchField'\r\n    });\r\n    return (\r\n        <div className=\"tc\">\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange}/> \r\n          {/* Removed 'this' */}\r\n          <Scroll>\r\n          {/* 'isPending' was replaced from (!robots.length) ? */}\r\n            { isPending ? <h1 className=\"tc\">Loading</h1> :\r\n              <ErrorBoundary>\r\n                <CardList robots={filteredRobots} />\r\n              </ErrorBoundary>\r\n            } \r\n          </Scroll>\r\n          \r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // connect() is a higher order function. A function that returns another function. \r\n\r\n/* 'state' is managed within the component (similar to variables declared within a function).\r\n  It allows to change and update our website. \r\n*/\r\n","// Create our 'action'\r\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\r\n\r\nexport const setSeachField = (text) => ({ \r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text \r\n});\r\n\r\n// // If I want to console to see what's happening.\r\n// export const setSeachField = (text) => { \r\n//   console.log(text);\r\n//   return {\r\n//     type: CHANGE_SEARCH_FIELD,\r\n//     payload: text \r\n//   }\r\n// };\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ REQUEST_ROBOTS_FAILED, payload: error }));\r\n}\r\n\r\n/*\r\n 'text' is whatever users type.\r\n 'payload' is commonly used. We are sending whatever data is needed to go on to the producer which is \r\n just going to be whatever the user enters.\r\n 'CHANGE_SEARCH_FIELD' is all capitalized because it's a constant and a constant is usually capitalized.\r\n In this way, if we use a variable and misspell it will get an error when we are running the app. \r\n*/","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\r\n\r\nconst initialSateSearch = {\r\n  searchField: \"\"\r\n}\r\n// Create our reducer\r\nexport const searchRobots = (state=initialSateSearch, action={}) => {\r\n  // console.log(action.type); // I will see 'CHANGE_SEARCH_FIELD' in console every time I type something. \r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}  \r\n\r\n/*\r\n  For 'initialSateSearch' we have the initial state value.\r\n  'searchRobots' is the action that's taking. It's going to search the robots using the search field.\r\n  Inside the parameters of the searchRobots function, we give default values to avoid an error.\r\n*/\r\n\r\nconst initialStateRobots ={\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n// import { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from './containers/App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from \"./reducers.js\";\nimport 'tachyons';\n\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n// Create our store\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); \n// Replaced searchRobots with rootReducer.\n\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}